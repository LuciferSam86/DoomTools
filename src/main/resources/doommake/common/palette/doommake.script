/* ------------------------------------------------------------------------ */

#define SRC_CONVERT_PALETTE_DIR "/convert/palettes"

/****************************************************************************
 * Rebuilds palette assets (palette and colormaps/tinttab/tranmap) in the 
 * conversion directories.
 ****************************************************************************/
check function doRebuildPalettes() {

	initBuild();

	baseIwadPath = getIwad();
	if (empty(baseIwadPath))
		return error("NoIWAD", "An IWAD for this project was not set in properties: " + PROP_IWADPATH);

	paletteLumpSet = set([
		"playpal"
	]);
	colormapLumpSet = set([
		"colormap",
		"fogmap",
		"tinttab",
		"trantbl0",
		"trantbl1",
		"trantbl2",
		"trantbl3",
		"trantbl4",
		"trantbl5",
		"trantbl6",
		"trantbl7",
		"trantbl8",
		"trantbl9",
		"trantbla",
		"trantblb",
		"trantblc",
		"trantbld",
		"trantble",
		"trantblf",
		"trantblg",
		"trantblh",
		"trantbli",
		"trantblj",
		"trantblk"
	]);
	
	existingPaletteSet = [];
	existingColormapSet = [];
	
	check (err) {
		iwad = wadfile(baseIwadPath);
		each (e : paletteLumpSet) {
			if (iwad->wadentryindex(e) != null)
				existingPaletteSet->setadd(e);
		}
		each (e : colormapLumpSet) {
			if (iwad->wadentryindex(e) != null)
				existingColormapSet->setadd(e);
		}
		
		outdirPath = getSourceDirectory() + SRC_CONVERT_PALETTE_DIR; 
		verifydirs(outdirPath);		
	
		paletteImage = null;
	
		each (p : existingPaletteSet) {
			println("Exporting PALETTE: " + p + "...");
			outfile = file(outdirPath + "/" + p + ".png"); 
			if (!fileexists(outfile)) {
				paletteImage = exportPaletteToImage(iwad, p);
				paletteImage->imagewrite(outfile, "PNG");
				println("Created `" + outfile + "`.");
			} else {
				println("Skipped creating `" + outfile + "`. Already exists!");
			}
		}
		
		each (p : existingColormapSet) {
			println("Exporting COLORMAP: " + p + "...");
			outfile = file(outdirPath + "/" + p + ".png");
			if (!fileexists(outfile)) {
				exportColormapToImage(iwad, p, paletteImage)->imagewrite(outfile, "PNG");
				println("Created `" + outfile + "`.");
			} else {
				println("Skipped creating `" + outfile + "`. Already exists!");
			}
		}
	}
	close(iwad);
	if (err) {
		return err;
	}
}

/****************************************************************************
 * Converts palette/colormap assets in the palette conversion directories.
 * Puts them in the global assets folder.
 ****************************************************************************/
check function doConvertPalettes() {

	initBuild();

	sourceDir = getSourceDirectory() + SRC_CONVERT_PALETTE_DIR;
	targetDir = getSourceDirectory() + "/assets/_global";
	verifydirs(sourceDir);
	verifydirs(targetDir);
			
	hash = directoryHasChanged(sourceDir);
	if (hash === null) {
		println("[Skipped] Palette conversion directory (" + sourceDir + ") up to date.");
		return;
	}

	println("Converting palettes and colormaps...");
	
	// FIXME: Must convert palette separately from colormaps.
	convert(sourceDir, targetDir, "palettes");

	storeDirectoryChanged(sourceDir, hash);
	setBuilt("convert-palettes");
	println("Palettes and colormaps converted from `" + sourceDir + "` to `" + targetDir + "`.");
}

