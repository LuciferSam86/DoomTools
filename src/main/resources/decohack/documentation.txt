==============================================================================
============                       DECOHACK                       ============
==============================================================================

DECOHack is a utility that reads a DECORATE-like syntax and outputs a DEH or 
BEX patch. You should probably read up on the DECORATE format before you 
proceed, as some pieces are similar, and some are not.

/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: It is important to note that DECOHack is CASCADING. 
      A definition of any kind will replace the original definition, 
      and anything unspecified is UNCHANGED.

/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

==============================================================================
===== Language Specs
==============================================================================

<BOOLEAN>    : true
               false

<IDENTIFIER> : Alphanumeric-plus-underscores token (starting with a letter).

<STRING>     : Any single- or double-quoted set of characters, or a raw string 
               bounded in backticks.

<INTEGER>    : Any positive integer, or hex integer. 

<NUMBER>     : <INTEGER>
               - <INTEGER>
               + <INTEGER> 


==============================================================================
===== Format (MUST BE SET FIRST!)
==============================================================================

To set the output format (and available features):

	using ( doom19 | udoom19 | boom | mbf | extended )


Examples:

	using doom19
	using boom


==============================================================================
===== Strings
==============================================================================

Reassigns a set of strings. Any strings replaced here can carry through to 
sprite names and sound names!

Doom 1.9:

    strings
	{
		<INTEGER> <STRING>
		...
	}


Boom and higher:

	strings
	{
		<IDENTIFIER> <STRING>
		...
	}


The Identifier in the Boom definition is the string mnemonic from the Boom 
DeHackEd specs. 


==============================================================================
===== Ammo
==============================================================================

Changes an ammo entry. `ammo` plus an index/type name, and an optional string 
for the new name. 

	ammo ( 0 | 1 | 2 | 3 | bullets | shells | rockets | cells ) <STRING>
	{
		max <INTEGER>
		pickup <INTEGER>
	}


Examples:

	ammo 0 "Splinters"
	{
		max 300
		pickup 20
	}
	
	ammo cells
	{
		max 5000
		pickup 100
	}


==============================================================================
===== Sound
==============================================================================

Changes a sound entry. `sound` plus the sound index/name. The sound name must 
match a sound string in the string table (should not start with DS or DP). 

	sound ( <INTEGER> | <STRING> )
	{
		priority <INTEGER>
		singular <BOOLEAN>
	}


Examples:

	sound 5
	{
		priority 200
		singular true
	}

	sound "barexp"
	{
		priority 200
		singular true
	}


==============================================================================
===== States
==============================================================================

Individual states can be manipulated and/or changed, but be careful - 
individual state manipulation should only be reserved for very few kinds of 
changes.

	state <INTEGER> 
	{ 
		[ <SpriteName> <Frame> <NUMBER> [Bright] [<ActionPointer>] ]
		( goto <INTEGER> | goto <IDENTIFIER> [ ( + | - ) <INTEGER> ] | wait | stop )
	}


In this case, "stop" is an alias for "goto 0", and "wait" is an alias for 
"goto <same state>". <SpriteName> must match a sprite name in the string 
table at the time this is declared. <Frame> must be a single valid character 
in a sprite frame. <NUMBER> is the duration in tics. Action pointer mnemonics 
must start with A_.

Examples:

	state 11
	{
		PISG A 1 A_Lower
		wait
	}

	state 15
	{
		PISG C 4
		goto 16
	}

	state 17
	{
		PISF A 7 Bright A_Light1
		goto 1
	}

	state 173
	{
		PLAY W -1
		stop
	}

	state 575 // change just next state
	{
		goto 577
	}
	
	state 911
	{
		CAND A -1 Bright
		stop
	}


For replacing states in bulk, you will have to "free" a bunch of states for
replacement.

	state free <INTEGER>


To free an explicit range (inclusive):

	state free <INTEGER> to <INTEGER>


To free from a starting state index, following next state indices until a 
free or protected state is reached:

	state free from <INTEGER>


Examples:

	state free 100
	state free 100 to 200
	state free from 100


(NOTE: "Freeing" a state does NOT ALTER IT, it just flags that state as
"available" for the state-filling functions in this utility.)

Then, you can fill a sequence of states starting from a specific state, and
free states will be auto-filled by availability, connected together in 
sequence. Be careful: it may fail with an error if you run out of available
states (especially action pointer states in Doom 1.9).

	state fill <INTEGER> 
	{ 
		<SpriteName> <Frame> <NUMBER> [Bright] [<ActionPointer>]
		...
		( goto <INTEGER> | goto <IDENTIFIER> [ ( + | - ) <INTEGER> ] | wait | stop )
	}


<Frame> in this situation can be many valid characters in a sprite frame. 


Examples:
	
	state fill 714
	{
		PAIN H 8 Bright
		PAIN I 8 Bright A_Scream
		PAIN JK 8 Bright
		PAIN L 8 Bright A_PainDie
		PAIN M 8 Bright
		stop
	}


Each state altered or filled this way is no longer "free."

You can protect a state from being freed (or an inclusive range of them) by 
writing the following:

	state protect <INTEGER>
	state protect <INTEGER> to <INTEGER>


It will not be flagged as "free" if in a range of free states, and attempting 
to alter the state directly will throw an error. By default, state 0 and 1 
are flagged as protected. You can turn off the protection on states by doing 
the following:

	state unprotect <INTEGER>
	state unprotect <INTEGER> to <INTEGER>


==============================================================================
===== Weapon
==============================================================================

Weapons are a combination of state filling and attribute declaration. All
definitions are cumulative on the weapon slot (separate definitions can alter 
the same slot in different ways).

Ready, Select, Deselect, Fire, and Flash state labels set the weapon state 
indices. Other labels are used for arbitrary jump points. "LightDone" is an 
alias for frame 1.

"Spawn" is not used, as that is used for the Thing for pickups.

	weapon <INTEGER> [ <STRING> ]
	{
		ammotype ( 0 | 1 | 2 | 3 | 5 | bullets | shells | cells | rockets | infinite )
		
		state <WeaponStateName> <INTEGER> // specific state assignment.
		
		states
		{
			ready:
				<StateInfo>
				...
			deselect:
				<StateInfo>
				...
			select:
				<StateInfo>
				...
			fire:
				<StateInfo>
				...
			flash:
				<StateInfo>
				...
		}
	}


Example:

	weapon 3 "Chaingun"
	{
		ammotype bullets
		states
		{
			ready:
				CHGG A 1 A_WeaponReady
				wait
			deselect:
				CHGG A 1 A_Lower
				wait
			select:
				CHGG A 1 A_Raise
				wait
			fire:
				CHGG AB 4 A_FireCGun
				CHGG B 0 A_ReFire
				goto ready
			flash:
				CHGF A 5 Bright A_Light1
				goto lightdone
				CHGF B 5 Bright A_Light1
				goto lightdone
		}
	}


To clear all states connected to a weapon, type the following:

	weapon <INTEGER> free states
	weapon <INTEGER> free <WeaponStateName> states


And the same result will happen if you freed from each defined weapon frame 
individually. Best used before redefining a weapon.


==============================================================================
===== Thing
==============================================================================

Things are a combination of state filling and attribute declaration. All
definitions are cumulative on the thing slot (separate definitions can alter 
the same slot in different ways).

Spawn, See, Melee, Missile, Pain, Death, XDeath, and Raise state labels set 
the thing state indices. Other labels are used for arbitrary jump points.

	thing <INTEGER> [ <STRING> ]
	{
		EdNum <NUMBER>
		
		Health <NUMBER>
		Speed <NUMBER>
		Radius <INTEGER>
		Height <INTEGER>
		Damage <NUMBER>
		ReactionTime <INTEGER>
		PainChance <INTEGER>
		Mass <INTEGER>
	
		Flags <INTEGER>
	
		Monster     // alias for Flags [monsterflags]
		Projectile  // alias for Flags [projectileflags]
		+ <INTEGER> // set flag(s)
		- <INTEGER> // unset flag(s)
	
		clear sounds // if present, clear all sounds.
			
		SeeSound <STRING>
		AttackSound <STRING>
		PainSound <STRING>
		DeathSound <STRING>
		ActiveSound <STRING>
		
		state <ThingStateName> <INTEGER> // specific state assignment.
		
		states
		{
			spawn:
				<StateInfo>
				...
			see:
				<StateInfo>
				...
			missile:
				<StateInfo>
				...
			pain:
				<StateInfo>
				...
			death:
				<StateInfo>
				...
			xdeath:
				<StateInfo>
				...
			raise:
				<StateInfo>
				...
		}
	}


Example:

	thing 11 "Chaingun Sargeant"
	{
		EdNum 65
		
		Health 70
		Speed 8
		Radius 20
		Height 56
		Damage 0
		ReactionTime 8
		PainChance 170
		Mass 100
	
		Monster
		+FLOORCLIP
	
		SeeSound "posit2"
		AttackSound ""
		PainSound "popain"
		DeathSound "podth2"
		ActiveSound "posact"
		
		states
		{
			Spawn:
				CPOS AB 10 A_Look
				Loop
			See:
				CPOS AABBCCDD 3 A_Chase
				Loop
			Missile:
				CPOS E 10 A_FaceTarget
			ReFire:
				CPOS FE 4 Bright A_CPosAttack
				CPOS F 1 A_CPosRefire
				Goto ReFire
			Pain:
				CPOS G 3
				CPOS G 3 A_Pain
				Goto See
			Death:
				CPOS H 5
				CPOS I 5 A_Scream
				CPOS J 5 A_Fall
				CPOS KLM 5
				CPOS N -1
				Stop
			XDeath:
				CPOS O 5 
				CPOS P 5 A_XScream
				CPOS Q 5 A_Fall
				CPOS RS 5
				CPOS T -1
				Stop
			Raise:
				CPOS N 5
				CPOS MLKJIH 5
				Goto See
		}
	}

To clear all states connected to a thing, type the following:

	thing <INTEGER> free states
	thing <INTEGER> free <ThingStateName> states


And the same result will happen if you freed from each defined thing frame 
individually. Based on the current thing definition. Best used before 
redefining a thing.

The following editor numbers cannot be used: 1, 2, 3, 4, 11.


==============================================================================
===== Par Times
==============================================================================

Only for certain patch formats (Boom-compatible), Par Times are declared this 
way:

	pars
	{
		<MapName> <INTEGER> 
	}

Where <LumpName> is a map lump (map or episode-map is derived from it), and
<INTEGER> is the par time in SECONDS.

Examples:

	pars
	{
		e1m1 30
		map20 150
		map45 200
	}


==============================================================================
===== Miscellany
==============================================================================

Miscellaneous data is in the miscellaneous block:

	misc
	{
		monsterInfighting <BOOLEAN>
		initialBullets <INTEGER>
		initialHealth <INTEGER>
		greenArmorClass <INTEGER>
		blueArmorClass <INTEGER>
		soulsphereHealth <INTEGER>
		maxSoulsphereHealth <INTEGER>
		megasphereHealth <INTEGER>
		godModeHealth <INTEGER>
		idfaArmor <INTEGER>
		idfaArmorClass <INTEGER>
		idkfaArmor <INTEGER>
		idkfaArmorClass <INTEGER>
		bfgCellsPerShot <INTEGER>
		maxHealth <INTEGER>
		maxArmor <INTEGER>
	}

==============================================================================
===== Preprocessor
==============================================================================



