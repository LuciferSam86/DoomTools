==============================================================================
============                       DECOHack                       ============
==============================================================================

DECOHack is a utility that reads a DECORATE-like syntax and outputs a DEH or 
BEX patch. You should probably read up on the ZDoom DECORATE format before 
you proceed, as some pieces are similar, and some are not.

 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: It is important to note that DECOHack is CASCADING. 
      A definition of any kind will alter or replace the original 
      definition, and anything unspecified in a definition will 
      remain UNCHANGED.

 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

==============================================================================
===== Some Language Specs
==============================================================================

<BOOLEAN>    : true
               false

<IDENTIFIER> : Alphanumeric-plus-underscores token (starting with a letter).

<STRING>     : Any single- or double-quoted set of characters, or a raw string 
               bounded in backticks.

<INTEGER>    : Any positive integer, or hex integer. 

<NUMBER>     : <INTEGER>
               - <INTEGER>

<FIXED>      : Any number with a decimal point in it (converted to a 
               fixed-point number). 

<NUMERIC>    : <FIXED>
               <INTEGER>
               - <FIXED>
               - <NUMBER>

==============================================================================
===== Comments
==============================================================================

You can put unparsed comments throughout your code using "//" for single-line
comments, or "/* */" for multi-line comments, like so:

    // This is a comment.
    
    /*
    This is a comment 
    on multiple lines.
    */
    
    /* Multi-line comments are
              pretty
        free          form */


You'll see them in a bunch of places in this documentation.


==============================================================================
===== Format (MUST BE SET FIRST!)
==============================================================================

To set the output format (and available features):

    using ( doom19 | udoom19 | boom | mbf | extended )


Examples:

    using doom19
    using boom


==============================================================================
===== Strings
==============================================================================

Reassigns a set of strings. Any strings replaced here can carry through to 
sprite names and sound names!

Doom 1.9:

    strings
    {
        <INTEGER> <STRING>
        ...
    }


Boom and higher:

    strings
    {
        <IDENTIFIER> <STRING>
        ...
    }


The Identifier in the Boom definition is the string mnemonic from the Boom 
DeHackEd specs. 


==============================================================================
===== Ammo
==============================================================================

Changes an ammo entry. `ammo` plus an index, and an optional string for the 
new name. 

    ammo ( 0 | 1 | 2 | 3 ) <STRING>
    {
        max <INTEGER>
        pickup <INTEGER>
    }


Examples:

    ammo 0 "Splinters"
    {
        max 300
        pickup 20
    }
    
    ammo 2
    {
        max 5000
        pickup 100
    }


==============================================================================
===== Sound
==============================================================================

Changes a sound entry. `sound` plus the sound index/name. The sound name must 
match a sound string in the string table (should not start with DS or DP). 

    sound ( <INTEGER> | <STRING> )
    {
        priority <INTEGER>
        singular <BOOLEAN>
    }


Examples:

    sound 5
    {
        priority 200
        singular true
    }

    sound "barexp"
    {
        priority 200
        singular true
    }


==============================================================================
===== States
==============================================================================

Individual states can be manipulated and/or changed, but be careful - 
individual state manipulation should only be reserved for very few kinds of 
changes.

    state <INTEGER> 
    { 
        [ <SpriteName> <Frame> <NUMBER> [Bright] [<ActionPointer>|<Offset>] ]
        ( 
            goto <INTEGER> 
            | goto <IDENTIFIER>
            | goto weapon <INTEGER> <WeaponStateLabel>
            | goto thing <INTEGER> <ThingStateLabel>
            | wait 
            | stop 
        )
    }


In this case, "stop" is an alias for "goto 0", and "wait" is an alias for 
"goto <last defined state>". <SpriteName> must match a sprite name in the 
string table at the time this is declared. <Frame> must be a single valid 
character in a sprite frame. <NUMBER> is the duration in tics. [Bright] is an
optional keyword indicating that the state graphic is always painted 
fullbright. Action pointer mnemonics must start with A_.

Some action pointers, especially in MBF and later formats, can be optionally 
parameterized up to two parameters:

	A_Die
	A_Die()
	A_Turn(90)
	A_RandomJump(344, 128)


Parameter values can also refer to state indices via thing or weapon label 
names and references to thing or weapon state labels (like how goto is used).

	A_RandomJump(missile2, 255)
	A_RandomJump(thing 23 pain, 128)


Some parameter values can be set with fixed-point numbers, but not every 
function requires them (be careful - it is up to the function to interpret
them as such):

    A_Mushroom(-45.0, 16.0)


If you don't use an Action Pointer, you can still set the parameter values
via the "Offset" function (only useful on weapon states):

	Offset(1, 32)


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: Even if you provide an action pointer, you can still 
      set the offsets (misc parameters) even if the function does not
      use them exclusively just by putting them in parenthesis, a la:
      A_Raise(1, 32).

 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


Examples:

    state 11
    {
        PISG A 1 A_Lower
        wait
    }

    state 13
    {
        PISG A 4 Offset(1, 32)
        goto 16
    }

    state 16
    {
        PISG C 4
        goto 16
    }

    state 17
    {
        PISF A 7 Bright A_Light1
        goto 1
    }

    state 173
    {
        PLAY W -1
        stop
    }

    state 575 // change just next state
    {
        goto 577
    }
    
    state 911
    {
        CAND A -1 Bright
        stop
    }


For replacing states in bulk, you will have to "free" a bunch of states for
replacement.

    state free <INTEGER>


To free an explicit range (inclusive):

    state free <INTEGER> to <INTEGER>


To free from a starting state index, following next state indices until a 
free or protected state is reached:

    state free from <INTEGER>


Examples:

    state free 100
    state free 100 to 200
    state free from 100


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: "Freeing" a state does NOT ALTER IT, it just flags 
      that state as "available" for the state-filling functions in 
      this utility.

 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


Then, you can fill a sequence of states starting from a specific state, and
free states will be auto-filled by availability, connected together in 
sequence. Be careful: it may fail with an error if you run out of available
states (especially action pointer states in Doom 1.9).

    state fill <INTEGER> 
    { 
        <SpriteName> <Frame> <NUMBER> [Bright] [<ActionPointer>|<Offset>]
        ...
        (
            goto <INTEGER> 
            | goto <IDENTIFIER>
            | goto weapon <INTEGER> <WeaponStateLabel>
            | goto thing <INTEGER> <ThingStateLabel>
            | wait 
            | stop 
            | loop 
        )
    }


<Frame> in this situation can be many valid characters in a sprite frame.


Examples:
    
    state fill 714
    {
        PAIN H 8 Bright
        PAIN I 8 Bright A_Scream
        PAIN JK 8 Bright
        PAIN L 8 Bright A_PainDie
        PAIN M 8 Bright
        stop
    }


Each state altered or filled this way is no longer "free."

You can protect a state from being freed (or an inclusive range of them) by 
writing the following:

    state protect <INTEGER>
    state protect <INTEGER> to <INTEGER>


It will not be flagged as "free" if in a range of free states, and attempting 
to alter the state directly will throw an error. By default, state 0 and 1 
are flagged as protected. You can turn off the protection on states by doing 
the following:

    state unprotect <INTEGER>
    state unprotect <INTEGER> to <INTEGER>


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: DECOHack is not very smart about figuring out user
      intent, especially around states with hardcoded purpose, in
      order to keep patch crafting as flexible as possible. For 
      example, one such state, State 266 (S_VILE_HEAL1), is the 
      state that the action pointer "A_VileChase" can make an actor
      jump to when it resurrects a dead monster, despite the fact
      that it is not referenced ANYWHERE on a thing definition's
      state pointers!
      
      Please view "DeHackEd Hardcodings.txt" in the docs folder for
      more info!
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


==============================================================================
===== Weapon
==============================================================================

Weapons are a combination of state filling and attribute declaration. All
definitions are cumulative on the weapon slot (separate definitions can alter 
the same slot in different ways).

Ready, Select, Deselect, Fire, and Flash state labels set the weapon state 
indices. Other labels are used for arbitrary jump points. "LightDone" is a 
built-in alias for state 1.

Unlike ZDoom DECORATE, the "Spawn" state is not used, as that is used by the 
Thing for pickups.

    weapon <INTEGER> [ : weapon <INTEGER> ] [ <STRING> ] 
    {
        ammotype ( 0 | 1 | 2 | 3 | 5 )
        
        // specific state assignment.
        state <WeaponStateName> <INTEGER>
        
        // specific state assignment using another thing's states.
        state <WeaponStateName> thing <INTEGER> <ThingStateLabel>
        
        // specific state assignment using another weapon's states.
        state <WeaponStateName> weapon <INTEGER> <WeaponStateLabel>
        
        // if present, clear all state indices (not freed!).
        clear states 

		// clears a specific label (not freed!).
        clear state <WeaponStateLabel>
        
        states
        {
            ready:
                <StateInfo>
                ...
            deselect:
                <StateInfo>
                ...
            select:
                <StateInfo>
                ...
            fire:
                <StateInfo>
                ...
            flash:
                <StateInfo>
                ...
        }
    }


Example:

    weapon 2 "Shotgun"
    {
        ammotype 1
        clear states
        states
        {
            ready:
                SHTG A 1 A_WeaponReady
                loop
            deselect:
                SHTG A 1 A_Lower
                loop
            select:
                SHTG A 1 A_Raise
                loop
            fire:
                SHTG A 3
                SHTG A 7 A_FireShotgun
                SHTG BC 5
                SHTG D 4
                SHTG CB 5
                SHTG A 3
                SHTG A 7 A_ReFire
                goto ready
            flash:
                SHTF A 4 Bright A_Light1
                SHTF B 3 Bright A_Light2
                goto lightdone
        }
    }


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: Using "goto" to jump to labels/state pointers that 
      you have not set yet will jump to whatever state is already 
      declared for that Weapon. To avoid this, you may need to pay 
      attention to the order of your state labels and declarations!
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

To flag all states as "free" that are connected to a weapon, type the 
following:

    weapon <INTEGER> free states
    weapon <INTEGER> free <WeaponStateName>


And the same result will happen if you freed from each defined weapon frame 
individually. Best used before redefining a weapon. NOTE: "Freeing" is NOT
the same as clearing the state definitions!

You can copy from another weapon slot by adding the [ : weapon <INTEGER> ] 
clause:

    weapon 3 : weapon 4 "New Weapon Name"
    {
        ...
    }


You can also swap two weapon slots:

    weapon 3 swap with 4


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: DECOHack does NOT have any concept of "inheritance"
      as DECORATE does. The copy via the ":" is a straight-up 
      definition copy, and does not have a concept of "super" or
      "parent" objects of any kind! 
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


==============================================================================
===== Thing
==============================================================================

Things are a combination of state filling and attribute declaration. All
definitions are cumulative on the thing slot (separate definitions can alter 
the same slot in different ways).

Spawn, See, Melee, Missile, Pain, Death, XDeath, and Raise state labels set 
the thing state indices. Other labels are used for arbitrary jump points.

    thing <INTEGER> [ : thing <INTEGER> ] [ <STRING> ] 
    {
        EdNum <NUMBER>
        
        Health <NUMBER>
        Speed <NUMBER>
        Radius <INTEGER>
        Height <INTEGER>
        Damage <NUMBER>
        ReactionTime <INTEGER>
        PainChance <INTEGER>
        Mass <INTEGER>
    
        Flags <INTEGER>
        + <INTEGER> // set flag(s)
        - <INTEGER> // unset flag(s)
    
        clear sounds // if present, clear all sounds.
            
        SeeSound <STRING>
        AttackSound <STRING>
        PainSound <STRING>
        DeathSound <STRING>
        ActiveSound <STRING>

        // specific state assignment.
        state <ThingStateName> <INTEGER>
        
        // specific state assignment using another thing's states.
        state <ThingStateName> thing <INTEGER> <ThingStateLabel>
        
        // specific state assignment using another weapon's states.
        state <ThingStateName> weapon <INTEGER> <WeaponStateLabel>
        
        // if present, clear all state indices (not freed!).
        clear states

		// clears a specific label (not freed!).
        clear state <ThingStateLabel>
        
        states
        {
            spawn:
                <StateInfo>
                ...
            see:
                <StateInfo>
                ...
            missile:
                <StateInfo>
                ...
            pain:
                <StateInfo>
                ...
            death:
                <StateInfo>
                ...
            xdeath:
                <StateInfo>
                ...
            raise:
                <StateInfo>
                ...
        }
    }


Example:

    thing 11 "Chaingun Sargeant"
    {
        EdNum 65
        
        Health 70
        Speed 8
        Radius 20
        Height 56
        Damage 0
        ReactionTime 8
        PainChance 170
        Mass 100
    
        Flags 0
        +SOLID
        +SHOOTABLE
        +COUNTKILL
    
        SeeSound "posit2"
        AttackSound ""
        PainSound "popain"
        DeathSound "podth2"
        ActiveSound "posact"
        
        states
        {
            Spawn:
                CPOS AB 10 A_Look
                Loop
            See:
                CPOS AABBCCDD 3 A_Chase
                Loop
            Missile:
                CPOS E 10 A_FaceTarget
            ReFire:
                CPOS FE 4 Bright A_CPosAttack
                CPOS F 1 A_CPosRefire
                Goto ReFire
            Pain:
                CPOS G 3
                CPOS G 3 A_Pain
                Goto See
            Death:
                CPOS H 5
                CPOS I 5 A_Scream
                CPOS J 5 A_Fall
                CPOS KLM 5
                CPOS N -1
                Stop
            XDeath:
                CPOS O 5 
                CPOS P 5 A_XScream
                CPOS Q 5 A_Fall
                CPOS RS 5
                CPOS T -1
                Stop
            Raise:
                CPOS N 5
                CPOS MLKJIH 5
                Goto See
        }
    }


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: Using "goto" to jump to labels/state pointers that 
      you have not set yet will jump to whatever state is already 
      declared for that Thing. To avoid this, you may need to pay 
      attention to the order of your state labels and declarations!
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


To flag all states as "free" that are connected to a thing, type the 
following:

    thing <INTEGER> free states
    thing <INTEGER> free <ThingStateName>


And the same result will happen if you freed from each defined thing frame 
individually. Based on the current thing definition. Best used before 
redefining a thing. NOTE: "Freeing" is NOT the same as clearing the state 
definitions!

The following editor numbers cannot be used: 1, 2, 3, 4, or 11, as they have
a special purpose: Player Starts, plus Deathmatch.

You can copy from another thing slot by adding the [ : thing <INTEGER> ] 
clause:

    thing 3 : thing 4 "New Name"
    {
        ...
    }


You can also swap two thing slots:

    thing 3 swap with 4


 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

      IMPORTANT: DECOHack does NOT have any concept of "inheritance"
      as DECORATE does. The copy via the ":" is a straight-up 
      definition copy, and does not have a concept of "super" or
      "parent" objects of any kind! 
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\

------------------
Flag Mnemonics
------------------

Instead of integers, you can use the following mnemonics for thing flags:

List of valid mnemonics and their values:

    SPECIAL =       0x00000001
    SOLID =         0x00000002
    SHOOTABLE =     0x00000004
    NOSECTOR =      0x00000008
    NOBLOCKMAP =    0x00000010
    AMBUSH =        0x00000020
    JUSTHIT =       0x00000040
    JUSTATTACKED =  0x00000080
    SPAWNCEILING =  0x00000100
    NOGRAVITY =     0x00000200
    DROPOFF =       0x00000400
    PICKUP =        0x00000800
    NOCLIP =        0x00001000
    SLIDE =         0x00002000
    FLOAT =         0x00004000
    TELEPORT =      0x00008000
    MISSILE =       0x00010000
    DROPPED =       0x00020000
    SHADOW =        0x00040000
    NOBLOOD =       0x00080000
    CORPSE =        0x00100000
    INFLOAT =       0x00200000
    COUNTKILL =     0x00400000
    COUNTITEM =     0x00800000
    SKULLFLY =      0x01000000
    NOTDMATCH =     0x02000000
    TRANSLATION =   0x04000000
    UNUSED1 =       0x08000000
    TRANSLATION2 =  0x08000000
    TOUCHY =        0x10000000
    UNUSED2 =       0x10000000
    BOUNCES =       0x20000000
    UNUSED3 =       0x20000000
    FRIEND =        0x40000000
    FRIENDLY =      0x40000000
    UNUSED4 =       0x40000000
    TRANSLUCENT =   0x80000000

Monsters tend to have 0x00400006 set (SOLID, SHOOTABLE, COUNTKILL).

Projectiles tend to have 0x00010610 set (MISSILE, NOGRAVITY, DROPOFF, 
NOBLOCKMAP).

Example:

    +SOLID
    -NOGRAVITY


==============================================================================
===== Par Times
==============================================================================

Only for certain patch formats (Boom-compatible), Par Times are declared this 
way:

    pars
    {
        <MapName> <INTEGER>           // seconds
        <MapName> <INTEGER>:<INTEGER> // minutes:seconds
    }

Where <MapName> is a map lump (map or episode-map is derived from it), and
<INTEGER> is the par time in SECONDS (or <INTEGER>:<INTEGER> is 
minutes:seconds).

Examples:

    pars
    {
        e1m1 30
        map20 150
        map20 2:30
        map45 200
    }


Note that DECOHack is not prudent enough to check for "valid" minutes and 
seconds. The formula, no matter what is entered, is always:

    (minutes * 60) + seconds

...which means that a value of 81:75 is considered perfectly valid:

    (81 * 60) + 75 = 4935 sec.


==============================================================================
===== Miscellany
==============================================================================

Miscellaneous data is in the miscellaneous block:

    misc
    {
        monsterInfighting <BOOLEAN>
        initialBullets <INTEGER>
        initialHealth <INTEGER>
        greenArmorClass <INTEGER>
        blueArmorClass <INTEGER>
        soulsphereHealth <INTEGER>
        maxSoulsphereHealth <INTEGER>
        megasphereHealth <INTEGER>
        godModeHealth <INTEGER>
        idfaArmor <INTEGER>
        idfaArmorClass <INTEGER>
        idkfaArmor <INTEGER>
        idkfaArmorClass <INTEGER>
        bfgCellsPerShot <INTEGER>
        maxHealth <INTEGER>
        maxArmor <INTEGER>
    }


==============================================================================
===== Preprocessor
==============================================================================

DECOHack has a C-like preprocessor. The following directives influence how
a DECOHack file is parsed.

------------------
#include
------------------

The #include directive includes the contents of the specified file. The 
filename is provided as a string parameter, and can either be a relative file 
path from the file that contains the directive or an absolute path. Files can 
be included more than once - use this with caution!

    #include "scenery.dh"
    #include "maps/mapnames.dh"


You can include some internal resource files by prefixing the file path with
"classpath:" and it will attempt to read that file from the Java classpath.
 
    #include "classpath:decohack/doom19_constants.dh"
 

------------------
#define
------------------

The #define directive defines a single-token macro that expands to a series of
other tokens. This is also useful for creating defines and testing if they 
were defined later. They may also expand to zero tokens. All macro tokens are 
CASE SENSITIVE!

NOTE: Unlike the C-language preprocessor, this does not create macro 
functions.

    #define GREETING_TEXT "Hello."
    #define FILE_WAS_INCLUDED


------------------
#undefine
------------------

The #undefine directive removes a previously defined macro. All subsequent 
uses of that macro are treated as though they were never defined.

    #define GREETING_TEXT "Hello."
    #undefine GREETING_TEXT


------------------
#ifdef
------------------

The #ifdef directive includes the next series of lines if the following macro
was defined, until it reaches an #endif directive.

    #define DOOM_STRINGS
    #ifdef DOOM_STRINGS
    #include "strings/doom.dh"
    #endif


------------------
#ifndef
------------------

The #ifdef directive includes the next series of lines if the following macro 
was NOT defined, until it reaches an #endif directive.

    #define NO_PAR_TIMES
    #ifndef NO_PAR_TIMES
    pars 
    { 
        e1m1 0:40 
    }
    #endif
    

------------------
#else
------------------

The #else directive ends the most recently started "if" directive block and 
provides an alternate section if the first "if" is not processed.


    #define TOUGH_PAR_TIMES
    #ifdef TOUGH_PAR_TIMES
    #include "maps/tough-partimes.dh"
    #else
    #include "maps/normal-partimes.dh"
    #endif


------------------
#endif
------------------

The #endif directive ends the most recently started "if" or "else" directive 
block.


==============================================================================
===== Built-in Resources
==============================================================================

#include "classpath:decohack/doom19.dh"

    Adds ammo, state, weapon slot, thing slot, and string mnemonics for 
    Doom 1.9 EXEs, plus the "using doom19" line.

#include "classpath:decohack/udoom19.dh"

    Adds ammo, state, weapon slot, thing slot, and string mnemonics for 
    Ultimate Doom 1.9 EXEs, plus the "using udoom19" line.

#include "classpath:decohack/boom.dh"

    Adds ammo, state, weapon slot, thing slot, and string mnemonics for 
    Boom-compatible EXEs, plus the "using boom" line.

#include "classpath:decohack/mbf.dh"

    Adds ammo, state, weapon slot, thing slot, and string mnemonics for 
    MBF-compatible EXEs, plus the "using mbf" line.

#include "classpath:decohack/extended.dh"

    Adds ammo, state, weapon slot, thing slot, and string mnemonics for 
    Extended-DEH-compatible EXEs, plus the "using extended" line, AND freeing
    up the free extended states immediately for use.

..............................................................................

#include "classpath:decohack/constants/friendly_things.dh"

    "Friendly" names for Doom things, all the way up through extended.

..............................................................................

#include "classpath:decohack/constants/doom19.dh"

    All ammo, state, weapon slot, thing slot, and string mnemonics for Doom 
    1.9 EXEs.

#include "classpath:decohack/constants/doom19/ammo.dh"

    All ammo slot mnemonics for Doom 1.9 EXEs.

#include "classpath:decohack/constants/doom19/states.dh"

    All state mnemonics for Doom 1.9 EXEs.

#include "classpath:decohack/constants/doom19/things.dh"

    All thing slot mnemonics for Doom 1.9 EXEs.

#include "classpath:decohack/constants/doom19/weapons.dh"

    All weapon slot mnemonics for Doom 1.9 EXEs.

#include "classpath:decohack/constants/doom19/strings.dh"

    All string mnemonics for Doom 1.9 EXEs.

#include "classpath:decohack/constants/udoom19.dh"

    All ammo, state, weapon slot, thing slot, and string mnemonics for 
    Ultimate Doom 1.9 EXEs (Doom 1.9 ammo, thing, weapon, and states are 
    reused).

#include "classpath:decohack/constants/udoom19/strings.dh"

    All string mnemonics for Ultimate Doom 1.9 EXEs.

#include "classpath:decohack/constants/boom.dh"

    All ammo, state, weapon slot, thing slot, and string mnemonics for 
    Boom-compatible EXEs.

#include "classpath:decohack/constants/boom/states.dh"

    All state mnemonics for Boom-compatible EXEs.

#include "classpath:decohack/constants/boom/strings.dh"

    All string mnemonics for Boom-compatible EXEs (meant to be a common
    define for both Doom indices and Boom string keys).

#include "classpath:decohack/constants/boom/things.dh"

    All thing mnemonics for Boom-compatible EXEs.

#include "classpath:decohack/constants/mbf.dh"

    All ammo, state, weapon slot, thing slot, and string mnemonics for 
    MBF-compatible EXEs.

#include "classpath:decohack/constants/mbf/states.dh"

    All state mnemonics for MBF-compatible EXEs.

#include "classpath:decohack/constants/mbf/things.dh"

    All thing mnemonics for MBF-compatible EXEs.

#include "classpath:decohack/constants/extended.dh"

    All ammo, state, weapon slot, thing slot, and string mnemonics for 
    Extended-DEH-compatible EXEs.

#include "classpath:decohack/constants/extended/states.dh"

    All state mnemonics for Extended-DEH-compatible EXEs.

#include "classpath:decohack/constants/extended/things.dh"

    All thing mnemonics for Extended-DEH-compatible EXEs.

